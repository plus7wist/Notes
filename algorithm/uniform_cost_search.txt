++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Uniform Cost Search
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--------------------------------------------------------------------------------
    问题
--------------------------------------------------------------------------------

problem.getStartState() # 获取起点状态

problem.isGoalState(state) # 一个状态是否是终点

problem.getSuccessors() # 获取后继列表
    # - 列表的每一项是 (state, action, cost)
    # - action 是到达这个后继 state 要进行的动作
    # - cost 是 action 的代价，是一个可加，可比较的值

对问题所求结果是一个 action 的列表，表示顺次经过这些 action 就可以从起始状态
转移到终点。并且这个方案是 cost 总和最小的。

--------------------------------------------------------------------------------
    算法
--------------------------------------------------------------------------------

算法是基于宽度优先搜索的变式。BFS 在搜索的时选择队列中的第一个元素，而 UCS 则
选择队列中代价最小的元素。

%% search.zip 里提供了优先队列的实现，可以取出优先级最小的元素。
