    inline 是 C/C++ 的关键字，主要有两个作用：

1.  建议函数内联展开。
        在某些特定的情况下，编译器可以选择不展开任意的内联函数。例如 gcc/g++ 里 -O0
    优化选项。
        编译器一般会提供强制内联，即一定会被展开的选项，例如 gcc 的：
            __attribute__((__always_inline__))
2.  使得函数具有全局唯一的符号表，重复同样的定义看作是同一函数。
        例如在某个头文件里实现了 foo 函数，而不是 inline 的也不是 static 的，那
    么可以想象：有两个不同的 cpp 引用了这个头文件，而这两个文件同时进驻某个编译
    目标（例如一个可执行文件），则会导致 foo 重复定义。
        如果把 foo 定义为 static，这意味着为每个 foo 生成一次目标代码。 
        如果把 foo 定义为 inline，则意味着每个 foo 是全局唯一的，多次定义看做同
    一个。如果需要外部链接，则会生成一个唯一的链接，当然全部内联也可以做到上述描
    述的结果。
